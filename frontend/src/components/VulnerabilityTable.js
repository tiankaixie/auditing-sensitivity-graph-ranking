import * as React from "react";
import MaterialTable from "material-table";
import { connect } from "react-redux";
import { withStyles } from "@material-ui/styles";
import Box from "@material-ui/core/Box";
import Paper from "@material-ui/core/Paper";
import LinearProgress from "@material-ui/core/LinearProgress";
import AddIcon from "@material-ui/icons/Add";
import PolicyIcon from '@material-ui/icons/Policy';
import {addProtectedNode, deleteProtectedNode} from "../actions";

const styles = theme => ({
  root: {
    width: "100%",
    overflow: "auto"
  }
});

const mapStateToProps = state => {
  return { perturbations: state.perturbations };
};

const mapDispatchToProps = dispatch => {
  return {
    addProtectedNode: nodeID => dispatch(addProtectedNode(nodeID))
  };
};

class VulnerabilityTable extends React.Component {
  render() {
    const columns = [
      {
        title: "Rank",
        field: "rank",
        cellStyle: {
          maxWidth: 50
        },
        headerStyle: {
          maxWidth: 50
        }
      },
      {
        title: "Node Name",
        field: "remove_id",
        cellStyle: {
          maxWidth: 200
        },
        headerStyle: {
          maxWidth: 200
        }
      },
      {
        title: "Vulnerability",
        field: "vul_percentile",
        cellStyle: {
          maxWidth: 200
        },
        headerStyle: {
          maxWidth: 200
        },
        render: rowData => (
          <LinearProgress
            variant="determinate"
            value={rowData.vul_percentile * 100}
          />
        )
      }
    ];
    return (
      <MaterialTable
        className={this.props.classes.root}
        columns={columns}
        data={this.props.perturbations}
        onRowClick={(event, rowData, togglePanel) => {
          // console.log(event.target);
        }}
        components={{
          Container: props => <Paper {...props} elevation={0} />
        }}
        options={{
          minBodyHeight: 450,
          maxBodyHeight: 450,
          padding: "dense",
          showTitle: false,
          paging: false,
          searchFieldAlignment: "left",
          searchFieldStyle: {
            minWidth: 580,
            maxHeight: 30
          },
          headerStyle: {
            paddingTop: 0,
            paddingBottom: 10
          },
          actionsColumnIndex: 3,
          actionsCellStyle: {
            minWidth: 100
          }
        }}
        actions={[
          {
            icon: AddIcon,
            tooltip: "Add to protected nodes",
            onClick: (event, rowData) => {
              //this.handleSearchNode(rowData);
              console.info("Add a node!!");
              console.info(rowData);
              this.props.addProtectedNode(rowData["remove_id"])
            }
          },
          {
            icon: PolicyIcon,
            tooltip: "Inspect the vulnerability",
            onClick: (event, rowData) => {
              //handleChangeIndex(1);
              //this.handleSelectTarget(rowData["name"]);
            }
          }
        ]}
      />
    );
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(VulnerabilityTable));
