import * as React from "react";
import MaterialTable from "material-table";
import { connect } from "react-redux";
import { withStyles } from "@material-ui/styles";
import Box from "@material-ui/core/Box";
import Paper from "@material-ui/core/Paper";
import LinearProgress from "@material-ui/core/LinearProgress";
import AddIcon from "@material-ui/icons/Add";
import PolicyIcon from "@material-ui/icons/Policy";
import {
  addProtectedNode,
  appendDetailList,
  deleteProtectedNode
} from "../actions";
import Chip from "@material-ui/core/Chip";
import { Tooltip } from "@material-ui/core";

const styles = theme => ({
  root: {
    width: "100%",
    overflow: "auto"
  },
  labelDot: {
    width: 5,
    height: 5,
    borderRadius: "50%",
    backgroundColor: "black",
    display: "inline-block"
  }
});

const mapStateToProps = state => {
  return {
    filteredPerturbations: state.filteredPerturbations,
    labels: state.labels
  };
};

const mapDispatchToProps = dispatch => {
  return {
    addProtectedNode: nodeID => dispatch(addProtectedNode([nodeID])),
    appendDetailList: node => dispatch(appendDetailList(node))
  };
};

class VulnerabilityTable extends React.Component {
  render() {
    // console.log(this.props.filteredPerturbations);
    const labelName = "politicalStandpoint";
    let columns = [
      {
        title: "Rank",
        field: "rank",
        cellStyle: {
          maxWidth: 50
        },
        headerStyle: {
          maxWidth: 50
        }
      },
      {
        title: "Node Name",
        field: "remove_id",
        cellStyle: {
          maxWidth: 200
        },
        headerStyle: {
          maxWidth: 200
        }
      },
      {
        title: "Label",
        field: "remove_id",
        cellStyle: {
          maxWidth: 100
        },
        headerStyle: {
          maxWidth: 100
        },
        render: rowData => {
          return (
            <Chip
              variant="outlined"
              size="small"
              label={
                this.props.labels[labelName][rowData["remove_id"]]["label"]
              }
            />
          );
        },
        customSort: (a, b) =>
          this.props.labels[labelName][a["remove_id"]]["value"] -
          this.props.labels[labelName][b["remove_id"]]["value"]
      },
      {
        title: "Influence",
        field: "vul_percentile",
        cellStyle: {
          maxWidth: 100
        },
        headerStyle: {
          maxWidth: 100
        },
        render: rowData => (
          <Tooltip title={rowData.node_influence}>
            <LinearProgress
              variant="determinate"
              value={rowData.vul_percentile * 100}
            />
          </Tooltip>
        )
      }
      // {
      //   title: "Vulnerability_P",
      //   field: "vul_p_percentile",
      //   cellStyle: {
      //     maxWidth: 100
      //   },
      //   headerStyle: {
      //     maxWidth: 100
      //   },
      //   render: rowData => (
      //     <LinearProgress
      //       variant="determinate"
      //       value={rowData.vul_p_percentile * 100}
      //     />
      //   )
      // },
      // {
      //   title: "Vulnerability_N",
      //   field: "vul_n_percentile",
      //   cellStyle: {
      //     maxWidth: 100
      //   },
      //   headerStyle: {
      //     maxWidth: 100
      //   },
      //   render: rowData => (
      //     <LinearProgress
      //       variant="determinate"
      //       value={rowData.vul_n_percentile * 100}
      //     />
      //   )
      // }
    ];

    if (this.props.filteredPerturbations.length > 0) {
      let labelColumns = [];
      Object.keys(this.props.filteredPerturbations[0]["label_influence"]).map(
        (key, i) => {
          if (i % 2 !== 0) {
            // console.log(key);
            labelColumns.push({
              title: key.slice(0, key.length - 11),
              field: "vul_percentile",
              cellStyle: {
                maxWidth: 100
              },
              headerStyle: {
                maxWidth: 100
              },
              customSort: (a, b) =>
                a["label_influence"][key] * 100 -
                b["label_influence"][key] * 100,
              render: rowData => (
                <React.Fragment>
                  <Tooltip
                    title={
                      rowData["label_influence"][
                        Object.keys(
                          this.props.filteredPerturbations[0]["label_influence"]
                        )[i - 1]
                      ]
                    }
                  >
                    <LinearProgress
                      variant="determinate"
                      value={rowData["label_influence"][key] * 100}
                    />
                  </Tooltip>
                </React.Fragment>
              )
            });
          }
        }
      );
      // console.log(labelColumns);
      columns = columns.concat(labelColumns);
    }

    return (
      <MaterialTable
        className={this.props.classes.root}
        columns={columns}
        data={this.props.filteredPerturbations}
        // onRowClick={(event, rowData, togglePanel) => {
        //   // console.log(event.target);
        // }}
        components={{
          Container: props => <Paper {...props} elevation={0} />
        }}
        options={{
          minBodyHeight: 679,
          maxBodyHeight: 679,
          padding: "dense",
          showTitle: false,
          paging: false,
          searchFieldAlignment: "left",
          searchFieldStyle: {
            minWidth: 580,
            maxHeight: 30
          },
          headerStyle: {
            paddingTop: 0,
            paddingBottom: 10
          },
          actionsColumnIndex: 0,
          actionsCellStyle: {
            minWidth: 60
          }
        }}
        actions={[
          {
            icon: AddIcon,
            tooltip: "Add to protected nodes",
            onClick: (event, rowData) => {
              // console.info("Add a node!!");
              // console.info(rowData);
              this.props.addProtectedNode(rowData["remove_id"]);
            }
          },
          {
            icon: PolicyIcon,
            tooltip: "Inspect the vulnerability",
            onClick: (event, rowData) => {
              this.props.appendDetailList(rowData);
              //handleChangeIndex(1);
              //this.handleSelectTarget(rowData["name"]);
            }
          }
        ]}
      />
    );
  }
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(styles)(VulnerabilityTable));
