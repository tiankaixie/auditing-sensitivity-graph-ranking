import React from "react";
import { withStyles } from "@material-ui/styles";
import {
  clusteringColors,
  influenceFromGreenToRed,
  leftPanelBackgroundColor
} from "../styles";
import Grid from "@material-ui/core/Grid";
import MaterialTable from "material-table";
import Paper from "@material-ui/core/Paper";
import ReactVisBar from "./ReactVisBar";
import ReactVisRadar from "./ReactVisRadar";
import Box from "@material-ui/core/Box";
import { Typography } from "@material-ui/core";
import Divider from "@material-ui/core/Divider";
import "../components/css/VulnerabilityView.css";
import VerifiedUserOutline from "@material-ui/icons/VerifiedUserOutlined";
import RoomOutline from "@material-ui/icons/RoomOutlined";
import Chip from "@material-ui/core/Chip";

const d3 = require("d3");

const styles = theme => ({
  root: {
    width: "100%",
    overflow: "auto",
    marginTop: theme.spacing(2)
  },
  bullet: {
    display: "inline-block",
    margin: "0 2px",
    transform: "scale(0.8)"
  },
  title: {
    fontSize: 14
  },
  pos: {
    marginBottom: 12
  },
  cardHeader: {
    marginLeft: theme.spacing(2),
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }
});

class VulnerabilityView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      snackbarOpen: false,
      message: "None"
    };
  }

  shouldComponentUpdate(nextProps, nextState, nextContext) {
    const { updateMessage } = nextProps;
    if (updateMessage === "init") {
      return true;
    } else {
      return false;
    }
  }

  handleSearchNode = rowData => {
    const nodeID = rowData["name"];
    d3.select("#graph-chart-base")
      .selectAll("circle")
      .style("stroke-width", 2)
      .style("stroke", "white")
      .style("r", 8);
    d3.select("#node-" + nodeID)
      .style("r", 15)
      .style("stroke", "black")
      .style("stroke-width", "3px");
    // const nodeID = String(rowData["name"].split(" ", 3)[2]).toLowerCase();
    // const { dataset } = this.props;
    // const clusterID = dataset.communities["node_cluster"][nodeID];

    this.props.updateHighlightNodeID(nodeID);
  };

  handleChipOnClick = d => {
    d3.select("#graph-chart-base")
      .selectAll("circle")
      .attr("fill", "#bdbdbd")
      .style("stroke-width", 1);
    const color = d3
      .scaleOrdinal()
      .domain([0, 1, 2, 3, 4, 5, 6])
      .range(influenceFromGreenToRed);
    const { dataset, attack } = this.props;
    for (let i = 0; i < attack.length; i++) {
      if (
        attack[i]["remove_id"] === parseInt(d.target.innerText.substring(6))
      ) {
        const nodeColorLinearScale = d3
          .scaleLinear()
          .domain(
            d3.extent(attack[i]["remove_res"].map(item => item["rank_change"]))
          )
          .range([0, 6]);
        d3.select("#node-" + d.target.innerText.substring(6))
          .style("stroke", "black")
          .style("stroke-width", "3px");
        attack[i]["remove_res"].forEach(ele => {
          d3.select("#node-" + ele.node_id).attr("fill", () => {
            return color(nodeColorLinearScale(ele["rank_change"]));
          });
        });
        break;
      }
    }
    this.setState({
      snackbarOpen: true,
      message: d.target.innerText + " has been selected"
    });
  };

  handleSnackbarClose = () => {
    this.setState({
      snackbarOpen: false
    });
  };

  handleSelectTarget = removeID => {
    // console.log(removeID);
    this.props.updateSelectNode(removeID);
  };

  render() {
    const {
      brushRange,
      updateMessage,
      attack,
      summary_attacking_effect,
      classes,
      labels,
      handleChangeIndex
    } = this.props;
    let data = attack;
    const attackSummary = summary_attacking_effect;
    let rankInfluenceRange = 0;
    let processedData = [];
    if (attack && data.length !== 0) {
      rankInfluenceRange = data.map(d => {
        const temp = d["remove_res"].map(dd => {
          return Math.abs(dd["rank_change"]);
        });
        return Math.max(...temp);
      });
      // console.log(data);
      data.sort((a, b) => {
        if (Math.abs(a["rank"]) > Math.abs(b["rank"])) {
          return 1;
        } else if (Math.abs(a["rank"]) < Math.abs(b["rank"])) {
          return -1;
        } else {
          if (a["remove_id"] < b["remove_id"]) {
            return 1;
          } else {
            return -1;
          }
        }
      });
      if (brushRange) {
        data = data.slice(brushRange[0], brushRange[1]);
      }
      // console.log(data);

      processedData = data.map((d, i) => {
        let processedDataItem = {
          name: d["remove_id"],
          id: i,
          rank: d["rank"],
          radar: d,
          detail: d
        };
        for (let key in labels) {
          processedDataItem[key] = labels[key][d["remove_id"]]["label"];
          processedDataItem[key + "_value"] =
            labels[key][d["remove_id"]]["value"];
        }
        return processedDataItem;
      });
    }

    let columns = [
      // {
      //   title: "NodeID",
      //   field: "id",
      //   cellStyle: {
      //     maxWidth: 50
      //   },
      //   headerStyle: {
      //     maxWidth: 50
      //   }
      {
        title: "Rank",
        field: "rank",
        cellStyle: {
          maxWidth: 50
        },
        headerStyle: {
          maxWidth: 50
        }
      },
      // },
      {
        title: "Node Name",
        field: "name",
        cellStyle: {
          maxWidth: 200
        },
        headerStyle: {
          maxWidth: 200
        }
      }

      // {
      //   title: "Actions",
      //   field: "id",
      //   cellStyle: {
      //     maxWidth: 60
      //   },
      //   headerStyle: {
      //     maxWidth: 60
      //   },
      //   render: rowData => {
      //     const row = rowData;
      //     return (
      //       <Button
      //         size={"small"}
      //         variant={"outlined"}
      //         color={"secondary"}
      //         onClick={() => {
      //           handleChangeIndex(1);
      //           this.handleSelectTarget(row["name"]);
      //         }}
      //       >
      //         Inspect
      //       </Button>
      //     );
      //   }
      // }
    ];
    let columnsOfLabels = Object.keys(labels).map(item => ({
      title: item,
      field: item,
      render: rowData => {
        // console.log(item);
        // console.log(rowData);
        return (
          <Chip
            size="small"
            variant="outlined"
            label={rowData[item]}
            style={{
              backgroundColor: clusteringColors[rowData[item + "_value"]],
              color: "white"
            }}
          />
        );
      }
    }));
    columns = columns.concat(columnsOfLabels);
    return (
      <Paper id={"vulnerability-view"} className={classes.root}>
        <Box className={classes.cardHeader}>
          <Typography variant="h6">Influence View</Typography>
        </Box>
        <Divider />
        <MaterialTable
          columns={columns}
          style={{ backgroundColor: leftPanelBackgroundColor, height: 750 }}
          data={processedData}
          detailPanel={[
            {
              tooltip: "Show Details",
              render: rowData => {
                return (
                  <Grid container>
                    <Grid item md={4}>
                      <ReactVisRadar
                        dataset={rowData.radar}
                        attackSummary={attackSummary}
                      />
                    </Grid>
                    <Grid item md={6}>
                      <ReactVisBar
                        dataset={rowData.detail}
                        visibleSize={this.props.visibleSize}
                      />
                    </Grid>
                  </Grid>
                );
              }
            }
          ]}
          options={{
            // pageSize: 10
            padding: "dense",
            showTitle: false,
            paging: false,
            searchFieldAlignment: "left",
            searchFieldStyle: {
              minWidth: 560,
              maxHeight: 30
            },
            headerStyle: {
              paddingTop: 0,
              paddingBottom: 10
            },
            actionsColumnIndex: 3,
            actionsCellStyle: {
              minWidth: 100
            }

            // padding: "dense"
            // headerStyle: {
            //   backgroundColor: leftPanelBackgroundColor
            // }
          }}
          components={{
            Container: props => <Paper {...props} elevation={0} />
          }}
          onRowClick={(event, rowData, togglePanel) => {
            // console.log(event.target);

            togglePanel();
          }}
          actions={[
            {
              icon: RoomOutline,
              tooltip: "Locate in graph",
              onClick: (event, rowData) => {
                this.handleSearchNode(rowData);
              }
            },
            {
              icon: VerifiedUserOutline,
              tooltip: "Inspect the vulnerability",
              onClick: (event, rowData) => {
                handleChangeIndex(1);
                this.handleSelectTarget(rowData["name"]);
              }
            }
          ]}
        />
      </Paper>
    );
  }
}

export default withStyles(styles)(VulnerabilityView);
